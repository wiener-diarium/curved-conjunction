---
import { readdir, readFile } from "node:fs/promises";

import Edition from "../../layouts/Edition.astro";

// export function parseXML(str: string) {
// 	const parser = new DOMParser();
// 	return parser.parseFromString(str, "application/xml");
// }

// export async function getMeta(name: string) {
// 	const filename = name.startsWith("wr_")
// 		? `data/editions/present/${name.replace("html", "xml")}`
// 		: `data/editions/legacy/${name.replace("html", "xml")}`;
// 	const html = await readFile(filename, "utf-8");
// 	const doc = parseXML(html);
// 	const issue = name.startsWith("wr_")
// 		? doc.querySelector("title[@level='a']")?.textContent
// 		: doc.querySelector("title[@type='num']")?.textContent;
// 	return issue;
// }

export async function getStaticPaths() {
	const entries = await readdir("edition", { withFileTypes: true });
	const about = await readFile("edition/about.json", "utf-8");
	const editions = JSON.parse(about);
	return entries
		.filter((entry) => entry.isFile() && entry.name.endsWith(".html"))
		.map((entry) => ({
			params: { slug: entry.name.replace(/\.html$/, "") },
			props: {
				html: readFile(`edition/${entry.name}`, "utf-8"),
				date: new Date(entry.name.replace(/\.html$/, "").replace("wr_", "")),
				issue:
					editions[
						(() => {
							const name = entry.name.replace(/\.html$/, "");
							return name.startsWith("wr_") ? name : `edoc_wd_${name}`;
						})()
					].title,
				corpus:
					editions[
						(() => {
							const name = entry.name.replace(/\.html$/, "");
							return name.startsWith("wr_") ? name : `edoc_wd_${name}`;
						})()
					].corpus,
			},
		}));
}

const { slug } = Astro.params;
const { html, date, issue, corpus } = Astro.props;
const baseurl = import.meta.env.BASE_URL ? import.meta.env.BASE_URL : "";
---

<style is:global>
	.text.basis-full {
		max-width: 1200px !important;
		margin: 0 auto !important;
	}
</style>
<Edition title={slug} baseurl={baseurl} date={date} issue={issue} corpus={corpus}>
	<div set:html={html} />
</Edition>
