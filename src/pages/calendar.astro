---
import Page from "../layouts/Page.astro";
import { readFile } from "node:fs/promises";

interface About {
	title: string;
	corpus: string;
}
interface AboutDict {
	[key: string]: About;
}
interface Calendar {
	date: string;
	url: string;
	label: string;
	kind: string;
}
const about = await readFile("edition/about.json", "utf8");
const data: AboutDict = JSON.parse(about);
const calendar: Array<Calendar> = [];
// iterate over data and extract two varialbes
for (const [key, value] of Object.entries(data)) {
	calendar.push({
		date: value.corpus === "1" ? key.replace("edoc_wd_", "") : key.replace("wr_", ""),
		url: key,
		label: value.title,
		kind: value.corpus,
	});
}

const baseurl = import.meta.env.BASE_URL ? import.meta.env.BASE_URL : "";
---

<Page title="Kalender" baseurl={baseurl}>
	<div class="md:py-4 sm:py-4">
		<h1 class="p-6 text-center text-4xl">Kalender</h1>
		<!-- @eslint ignore -->
		<acdh-ch-calendar>
			<label>
				<span>Jahr:</span>
				<acdh-ch-calendar-year-picker></acdh-ch-calendar-year-picker>
			</label>
			<acdh-ch-calendar-year data-variant="sparse"></acdh-ch-calendar-year>
		</acdh-ch-calendar>
		<div id="calendar" class="mt-6 p-2"></div>
	</div>
</Page>
<link rel="stylesheet" href="https://unpkg.com/@acdh-oeaw/calendar-component/dist/calendar.css" />
<script is:inline type="module" define:vars={{ calendar }}>
	import { register } from "https://unpkg.com/@acdh-oeaw/calendar-component/dist/calendar.js";

	/**
	 * Defaults to radio group for selecting current calendar year.
	 *
	 * To display a `<select>` instead, use `register({ picker: "select" });`.
	 */
	register({ picker: "select" });

	const de = {
		months: [
			"Jänner",
			"Februar",
			"März",
			"April",
			"Mai",
			"Juni",
			"Juli",
			"August",
			"September",
			"Oktober",
			"November",
			"Dezember",
		],
	};

	function createCalendar(i18n, events, onEventClick) {
		const calendar = document.querySelector("acdh-ch-calendar");

		if (i18n != null) {
			calendar.setI18n(i18n);
		}

		calendar.setData({ events });

		calendar.addEventListener("calendar-event-click", onEventClick);
	}

	function onEventClick(event) {
		const { events } = event.detail;
		if (events.length === 0) {
			return;
		} else if (events.length === 1) {
			window.location.href = "edition/" + events[0].url;
			return;
		} else {
			const calendar = document.getElementById("calendar");
			calendar.innerHTML = events.map((event) => {
				return `<a href="edition/${event.url}" class="block p-2 hover:bg-gray-100 cursor">
									${event.label}
								</a>`;
			});
		}
		//window.location.href = "edition/" + events.url;
	}

	try {
		const events = calendar.map((event) => {
			return { ...event, date: new Date(event.date) };
		});
		createCalendar(de, events, onEventClick);
		console.log("Successfully created calendar.");
	} catch (error) {
		console.error("Failed to create calendar.\n", String(error));
	}
</script>
<style is:global>
	:root {
		font-family: ui-sans-serif, system-ui, sans-serif;
	}

	/* acdh-ch-calendar-year table > tr > td button[data-event-kinds] {
		border-bottom: 2px solid dodgerblue;
	} */

	acdh-ch-calendar-year table > tr > td button[data-event-kinds="1"] {
		border-bottom: 2px solid cyan;
	}

	acdh-ch-calendar-year table > tr > td button[data-event-kinds="2"] {
		border-bottom: 2px solid blue;
	}

	acdh-ch-calendar-year {
		display: grid;
		grid-template-columns: repeat(4, 1fr);
	}

	acdh-ch-calendar-year table > tr > td {
		text-align: center;
	}

	acdh-ch-calendar-year-picker select {
		margin-left: 0.5rem;
		padding: 0.5rem;
	}
</style>
