---
import type { CollectionEntry } from "astro:content";

import FormatUrl from "../components/FormatUrl.astro";

type Props = CollectionEntry<"publications">["data"];
interface Author {
	lastName: string;
	firstName: string;
	middleName?: string;
}
type Authors = Array<Author>;

const {
	publicationUnstructured,
	title,
	authors,
	year,
	publishedIn,
	publishers,
	pubPlace,
	volume,
	pages,
	url,
	urldate,
} = Astro.props;

const unstructured = publicationUnstructured ? true : false;

function stringifyAuthors(authors: Authors) {
	return authors
		.map((author: Author) => {
			return `${author.lastName}, ${author.firstName}${author.middleName ? " " + author.middleName : ""}`;
		})
		.join("; ");
}
const urlToHtml = (url: string) => {
	return `<a href="${url}" target="_blank">
			${url}
		</a>`;
};
function urldateToHTml(urldate: Date) {
	return ` (Zugriff am ${urldate.toLocaleDateString("de-DE", {
		year: "numeric",
		month: "2-digit",
		day: "2-digit",
	})})`;
}
function createTemplate(
	unstructured: boolean,
	publicationUnstructured: string,
	title: string,
	authors: Authors | undefined,
	year: number,
	publishedIn: string,
	publishers: string,
	pubPlace: string,
	volume: string,
	pages: string,
	url: string,
	urldate: Date,
) {
	if (unstructured) {
		return publicationUnstructured;
	}
	return stringifyAuthors(authors) + ":" + title + "." + publishedIn
		? `In: ${publishedIn}.`
		: String(publishers) + pubPlace
			? pubPlace + ":"
			: String(year)
				? year + "."
				: String(volume)
					? volume + "."
					: String(pages)
						? pages + "."
						: String(url)
							? urlToHtml(url)
							: String(urldate)
								? urldateToHTml(urldate)
								: "";
}
---

<li class="p-2">
	{
		createTemplate(
			unstructured,
			publicationUnstructured,
			title,
			authors,
			year,
			publishedIn,
			publishers,
			pubPlace,
			volume,
			pages,
			url,
			urldate,
		)
	}
	<FormatUrl url={url} />
</li>
